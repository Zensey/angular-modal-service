{"version":3,"sources":["angular-modal-service.min.js","angular-modal-service.js"],"names":["module","angular","directive","$animateCss","$animate","linkFn","scope","element","attrs","addClass","replace","templateUrl","compile","tElement","tAttrs","factory","$document","$compile","$controller","$http","$rootScope","$q","$templateRequest","$timeout","ModalService","open_dlg_counter","self","this","getTemplate","template","deferred","defer","resolve","then","error","reject","promise","appendChild","parent","child","children","length","enter","showModal","options","console","log","controllerName","controller","controllerAs","modalScope","$new","closeDeferred","closeCompleteDeferred","inputs","$scope","close","result","delay","undefined","leave","modalElement","$destroy","modal","backdropElement","backdropScope","inputName","modalElementTemplate","$element","modalController","backdropDomEl","appendElement","body","append","closeComplete","find"],"mappings":"AAAA;AACA,CCKC,WAEC,YAEA,IAAIA,GAASC,QAAQD,OAAO,yBAG5BA,GAAOE,UAAU,gBACX,SAASC,EAAaC,GAUlB,QAASC,GAAOC,EAAOC,EAASC,GAC5BJ,EAASK,SAASF,EAAS,MAV/B,OACIG,SAAS,EACTC,YAAa,yCACbC,QAAS,SAASC,EAAUC,GAExB,MAAOT,OA8BzBL,EAAOe,QAAQ,gBAAiB,WAAY,YAAa,WAAY,cAAe,QAAS,aAAc,KAAM,mBAAoB,WACnI,SAASX,EAAUY,EAAWC,EAAUC,EAAaC,EAAOC,EAAYC,EAAIC,EAAkBC,GAK9F,QAASC,KAEP,GAAIC,GAAmB,EACnBC,EAAOC,KAKPC,EAAc,SAASC,EAAUlB,GACnC,GAAImB,GAAWT,EAAGU,OAalB,OAZGF,GACDC,EAASE,QAAQH,GACTlB,EACRW,EAAiBX,GAAa,GAC3BsB,KAAK,SAAUJ,GACdC,EAASE,QAAQH,IAChB,SAAUK,GACXJ,EAASK,OAAOD,KAGpBJ,EAASK,OAAO,kDAEXL,EAASM,SAMdC,EAAc,SAASC,EAAQC,GACjC,GAAIC,GAAWF,EAAOE,UACtB,OAAIA,GAASC,OAAS,EACbrC,EAASsC,MAAMH,EAAOD,EAAQE,EAASA,EAASC,OAAS,IAE3DrC,EAASsC,MAAMH,EAAOD,GAG/BZ,GAAKiB,UAAY,SAASC,GACxBnB,IACAoB,QAAQC,IAAI,mBAAoBrB,EAGhC,IAAIK,GAAWT,EAAGU,QAGdgB,EAAiBH,EAAQI,UAC7B,OAAID,IAODH,EAAQK,eACTF,EAAiBA,EAAiB,OAASH,EAAQK,cAIrDrB,EAAYgB,EAAQf,SAAUe,EAAQjC,aACnCsB,KAAK,SAASJ,GAGb,GAAIqB,GAAa9B,EAAW+B,OAQxBC,EAAgB/B,EAAGU,QACnBsB,EAAwBhC,EAAGU,QAC3BuB,GACFC,OAAQL,EACRM,MAAO,SAASC,EAAQC,GACtBjC,IAEakC,SAAVD,GAAiC,OAAVA,IAAgBA,EAAQ,GAClDnC,EAAS,WAEP6B,EAAcpB,QAAQyB,GAGpBrD,EAASwD,MAAMC,GACd5B,KAAK,WAEJoB,EAAsBrB,QAAQyB,GAG5BP,EAAWY,WAKbR,EAAOE,MAAQ,KACf1B,EAAW,KACXsB,EAAgB,KAChBW,EAAQ,KACRT,EAAS,KACTO,EAAe,KACfX,EAAa,OAKjB9C,EAASwD,MAAMI,GACb/B,KAAK,WACFgC,EAAcH,cAGlBJ,IAKP,IAAGd,EAAQU,OACT,IAAI,GAAIY,KAAatB,GAAQU,OAC3BA,EAAOY,GAAatB,EAAQU,OAAOY,EAKvC,IAAIC,GAAuBlE,QAAQM,QAAQsB,GAIvCxB,EAASY,EAASkD,GAClBN,EAAexD,EAAO6C,EAC1BI,GAAOc,SAAWP,CAGlB,IAAIQ,GAAkBnD,EAAY6B,EAAgBO,GAG9CW,EAAgB7C,EAAW+B,OAC3BmB,EAAgBrE,QAAQM,QAAQ,8BAChCyD,EAAkB/C,EAASqD,GAAeL,EAI1CrB,GAAQ2B,cAEVlC,EAAYO,EAAQ2B,cAAeV,IAGnCxB,EAAYmC,EAAMX,GAElBW,EAAKC,OAAOT,GAMd,IAAID,IACFf,WAAYqB,EACZ/D,MAAO4C,EACP3C,QAASsD,EACTL,MAAOJ,EAAchB,QACrBsC,cAAerB,EAAsBjB,QAIvCN,GAASE,QAAQ+B,KAGlB9B,KAAK,KAAM,SAASC,GACnBJ,EAASK,OAAOD,KAGbJ,EAASM,UA1HdN,EAASK,OAAO,qCACTL,EAASM,UAjDtB,GAAIoC,GAAOxD,EAAU2D,KAAK,OA+K1B,OAAO,IAAInD","file":"angular-modal-service.min.js","sourcesContent":["/*angular-modal-service v0.6.9 - https://github.com/dwmkerr/angular-modal-service */\n!function(){\"use strict\";var e=angular.module(\"angularModalService\",[]);e.factory(\"ModalService\",[\"$animate\",\"$document\",\"$compile\",\"$controller\",\"$http\",\"$rootScope\",\"$q\",\"$templateRequest\",\"$timeout\",function(e,n,t,r,l,o,c,u,i){function a(){var n=this,l=function(e,n){var t=c.defer();return e?t.resolve(e):n?u(n,!0).then(function(e){t.resolve(e)},function(e){t.reject(e)}):t.reject(\"No template or templateUrl has been specified.\"),t.promise},a=function(n,t){var r=n.children();return r.length>0?e.enter(t,n,r[r.length-1]):e.enter(t,n)};n.showModal=function(n){var u=c.defer(),p=n.controller;return p?(l(n.template,n.templateUrl).then(function(l){var p=o.$new(),f=c.defer(),d=c.defer(),m={$scope:p,close:function(n,t){(void 0===t||null===t)&&(t=0),i(function(){f.resolve(n),e.leave($).then(function(){d.resolve(n),p.$destroy(),m.close=null,u=null,f=null,g=null,m=null,$=null,p=null})},t)}};n.inputs&&angular.extend(m,n.inputs);var v=t(l),$=v(p);m.$element=$;var h=r(n.controller,m);n.controllerAs&&(p[n.controllerAs]=h),n.appendElement?a(n.appendElement,$):a(s,$);var g={controller:h,scope:p,element:$,close:f.promise,closed:d.promise};u.resolve(g)}).then(null,function(e){u.reject(e)}),u.promise):(u.reject(\"No controller has been specified.\"),u.promise)}}var s=n.find(\"body\");return new a}])}();\n//# sourceMappingURL=angular-modal-service.min.js.map\n","//  angularModalService.js\n//\n//  Service for showing modal dialogs.\n\n/***** JSLint Config *****/\n/*global angular  */\n(function() {\n\n  'use strict';\n\n  var module = angular.module('angularModalService', []);\n\n\n  module.directive('modalBackdrop',\n        function($animateCss, $animate /*$injector, $modalStack*/) {\n            return {\n                replace: true,\n                templateUrl: 'templates/dialogs/dialog-backdrop.html',\n                compile: function(tElement, tAttrs) {\n                    //tElement.addClass('fade');\n                    return linkFn;\n                }\n            };\n\n            function linkFn(scope, element, attrs) {\n                $animate.addClass(element, 'in');\n                //element.bind('click', function() {\n                //    console.log('>');\n                //});\n\n                //if (attrs.modalInClass) {\n                //    $animateCss(element, {\n                //        addClass: attrs.modalInClass\n                //    }).start();\n                //\n                //    scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {\n                //        var done = setIsAsync();\n                //        if (scope.modalOptions.animation) {\n                //            $animateCss(element, {\n                //                removeClass: attrs.modalInClass\n                //            }).start().then(done);\n                //        } else {\n                //            done();\n                //        }\n                //    });\n                //}\n            }\n        })\n\n\n  module.factory('ModalService', ['$animate', '$document', '$compile', '$controller', '$http', '$rootScope', '$q', '$templateRequest', '$timeout',\n    function($animate, $document, $compile, $controller, $http, $rootScope, $q, $templateRequest, $timeout) {\n\n    //  Get the body of the document, we'll add the modal to this.\n    var body = $document.find('body');\n\n    function ModalService() {\n\n      var open_dlg_counter = 0;\n      var self = this;\n\n      //  Returns a promise which gets the template, either\n      //  from the template parameter or via a request to the\n      //  template url parameter.\n      var getTemplate = function(template, templateUrl) {\n        var deferred = $q.defer();\n        if(template) {\n          deferred.resolve(template);\n        } else if(templateUrl) {\n          $templateRequest(templateUrl, true)\n            .then(function (template) {\n              deferred.resolve(template);\n            }, function (error) {\n              deferred.reject(error);\n            });\n        } else {\n          deferred.reject(\"No template or templateUrl has been specified.\");\n        }\n        return deferred.promise;\n      };\n\n      //  Adds an element to the DOM as the last child of its container\n      //  like append, but uses $animate to handle animations. Returns a\n      //  promise that is resolved once all animation is complete.\n      var appendChild = function(parent, child) {\n        var children = parent.children();\n        if (children.length > 0) {\n          return $animate.enter(child, parent, children[children.length - 1]);\n        }\n        return $animate.enter(child, parent);\n      };\n\n      self.showModal = function(options) {\n        open_dlg_counter++;\n        console.log('open_dlg_counter', open_dlg_counter);\n\n        //  Create a deferred we'll resolve when the modal is ready.\n        var deferred = $q.defer();\n\n        //  Validate the input parameters.\n        var controllerName = options.controller;\n        if(!controllerName) {\n          deferred.reject(\"No controller has been specified.\");\n          return deferred.promise;\n        }\n\n        //  If a 'controllerAs' option has been provided, we change the controller\n        //  name to use 'as' syntax. $controller will automatically handle this.\n        if(options.controllerAs) {\n          controllerName = controllerName + \" as \" + options.controllerAs;\n        }\n\n        //  Get the actual html of the template.\n        getTemplate(options.template, options.templateUrl)\n          .then(function(template) {\n\n            //  Create a new scope for the modal.\n            var modalScope = $rootScope.$new();\n\n            //  Create the inputs object to the controller - this will include\n            //  the scope, as well as all inputs provided.\n            //  We will also create a deferred that is resolved with a provided\n            //  close function. The controller can then call 'close(result)'.\n            //  The controller can also provide a delay for closing - this is\n            //  helpful if there are closing animations which must finish first.\n            var closeDeferred = $q.defer();\n            var closeCompleteDeferred = $q.defer();\n            var inputs = {\n              $scope: modalScope,\n              close: function(result, delay) {\n                open_dlg_counter--;\n\n                if(delay === undefined || delay === null) delay = 0;\n                $timeout(function() {\n                  //  Resolve the 'close' promise.\n                  closeDeferred.resolve(result);\n\n                  //  Let angular remove the element and wait for animations to finish.\n                    $animate.leave(modalElement)\n                    .then(function () {\n                      //  Resolve the 'closeComplete' promise.\n                      closeCompleteDeferred.resolve(result);\n\n                      //  We can now clean up the scope\n                        modalScope.$destroy();\n\n                      //  Unless we null out all of these objects we seem to suffer\n                      //  from memory leaks, if anyone can explain why then I'd\n                      //  be very interested to know.\n                      inputs.close = null;\n                      deferred = null;\n                      closeDeferred = null;\n                      modal = null;\n                      inputs = null;\n                      modalElement = null;\n                      modalScope = null;\n                    });\n\n\n\n                  $animate.leave(backdropElement)\n                   .then(function () {\n                       backdropScope.$destroy();\n                   });\n\n                }, delay);\n              }\n            };\n\n            //  If we have provided any inputs, pass them to the controller.\n            if(options.inputs) {\n              for(var inputName in options.inputs) {\n                inputs[inputName] = options.inputs[inputName];\n              }\n            }\n\n            //  Parse the modal HTML into a DOM element (in template form).\n            var modalElementTemplate = angular.element(template);\n\n            //  Compile then link the template element, building the actual element.\n            //  Set the $element on the inputs so that it can be injected if required.\n            var linkFn = $compile(modalElementTemplate);\n            var modalElement = linkFn(modalScope);\n            inputs.$element = modalElement;\n\n            //  Create the controller, explicitly specifying the scope to use.\n            var modalController = $controller(controllerName, inputs);\n\n            //backdrop\n            var backdropScope = $rootScope.$new();\n            var backdropDomEl = angular.element('<div modal-backdrop></div>');\n            var backdropElement = $compile(backdropDomEl)(backdropScope);\n\n\n            //  Finally, append the modal to the dom.\n            if (options.appendElement) {\n              // append to custom append element\n              appendChild(options.appendElement, modalElement);\n            } else {\n              // append to body when no custom append element is specified\n              appendChild(body, modalElement);\n\n              body.append(backdropElement);\n              //$animate.enter(modalElement, body);\n              //backdropElement.append(modalElement)\n            }\n\n            //  We now have a modal object...\n            var modal = {\n              controller: modalController,\n              scope: modalScope,\n              element: modalElement,\n              close: closeDeferred.promise,\n              closeComplete: closeCompleteDeferred.promise\n            };\n\n            //  ...which is passed to the caller via the promise.\n            deferred.resolve(modal);\n\n          })\n          .then(null, function(error) { // 'catch' doesn't work in IE8.\n            deferred.reject(error);\n          });\n\n        return deferred.promise;\n      };\n\n    }\n\n    return new ModalService();\n  }]);\n\n}());\n"],"sourceRoot":"/source/"}